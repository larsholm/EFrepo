// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace ConsoleApp1
{
    public partial class TMG2_ALWContext : DbContext
    {
        public TMG2_ALWContext()
        {
        }

        public TMG2_ALWContext(DbContextOptions<TMG2_ALWContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActiveRatingScheme> ActiveRatingScheme { get; set; }
        public virtual DbSet<CountryGroup> CountryGroup { get; set; }
        public virtual DbSet<CountryGroupRatingCurrency> CountryGroupRatingCurrency { get; set; }
        public virtual DbSet<CountryGroupRatingOrder> CountryGroupRatingOrder { get; set; }
        public virtual DbSet<CountryGroupToEquityFactor> CountryGroupToEquityFactor { get; set; }
        public virtual DbSet<CountryGroupToEquityFactorView> CountryGroupToEquityFactorView { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<EquityFactor> EquityFactor { get; set; }
        public virtual DbSet<RatingScheme> RatingScheme { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=TMG2_ALW;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Danish_Norwegian_CI_AS");

            modelBuilder.Entity<ActiveRatingScheme>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__ActiveRa__FBDF78E9393714F1");

                entity.HasIndex(e => e.FromDate, "idx_ActiveRatingScheme_FromDate")
                    .IsUnique()
                    .HasFilter("([Error]=(0))")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(CONVERT([date],getutcdate()))");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.HasOne(d => d.RatingSchemeRecord)
                    .WithMany(p => p.ActiveRatingScheme)
                    .HasForeignKey(d => d.RatingSchemeRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ActiveRatingScheme_Scheme");
            });

            modelBuilder.Entity<CountryGroup>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__tmp_ms_x__FBDF78E995298023");

                entity.HasIndex(e => e.CountryGroupId, "idx_CountryGroup_Id")
                    .IsUnique()
                    .HasFilter("([Active]=(1))")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CountryGroupId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");
            });

            modelBuilder.Entity<CountryGroupRatingCurrency>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__CountryG__FBDF78E92D332949");

                entity.HasIndex(e => e.CountryGroupRatingOrderRecordId, "idx_CountryGroupRatingCurrency_Unique")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CountryGroupRatingOrderRecord)
                    .WithOne(p => p.CountryGroupRatingCurrency)
                    .HasForeignKey<CountryGroupRatingCurrency>(d => d.CountryGroupRatingOrderRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupRatingCurrency_CountryGroupRatingOrder");

                entity.HasOne(d => d.CurrencyRecord)
                    .WithMany(p => p.CountryGroupRatingCurrency)
                    .HasForeignKey(d => d.CurrencyRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupRatingCurrency_Currency");
            });

            modelBuilder.Entity<CountryGroupRatingOrder>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__CountryG__FBDF78E949D6864D");

                entity.HasIndex(e => new { e.RatingSchemeRecordId, e.CountryGroupRecordId }, "idx_CountryGroupRatingOrder_Group")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasOne(d => d.CountryGroupRecord)
                    .WithMany(p => p.CountryGroupRatingOrder)
                    .HasForeignKey(d => d.CountryGroupRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupRatingOrder_CountryGroup");

                entity.HasOne(d => d.RatingSchemeRecord)
                    .WithMany(p => p.CountryGroupRatingOrder)
                    .HasForeignKey(d => d.RatingSchemeRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupRatingOrder_Scheme");
            });

            modelBuilder.Entity<CountryGroupToEquityFactor>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__CountryG__FBDF78E9EA8A7086");

                entity.HasIndex(e => new { e.RatingSchemeRecordId, e.CountryGroupRatingCurrencyRecordId, e.EquityFactorRecordId }, "idx_CountryGroupToEquityFactor_Unique")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.FromAmountInclusive).HasColumnType("numeric(28, 8)");

                entity.HasOne(d => d.CountryGroupRatingCurrencyRecord)
                    .WithMany(p => p.CountryGroupToEquityFactor)
                    .HasForeignKey(d => d.CountryGroupRatingCurrencyRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupToEquityFactor_Group");

                entity.HasOne(d => d.EquityFactorRecord)
                    .WithMany(p => p.CountryGroupToEquityFactor)
                    .HasForeignKey(d => d.EquityFactorRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupToEquityFactor_Factor");

                entity.HasOne(d => d.RatingSchemeRecord)
                    .WithMany(p => p.CountryGroupToEquityFactor)
                    .HasForeignKey(d => d.RatingSchemeRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CountryGroupToEquityFactor_Scheme");
            });

            modelBuilder.Entity<CountryGroupToEquityFactorView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountryGroupToEquityFactorView");

                entity.Property(e => e.CountryGroupId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.EquityFactorId)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.FromAmountInclusive).HasColumnType("numeric(28, 8)");

                entity.Property(e => e.SchemeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ToAmountExclusive).HasColumnType("numeric(28, 8)");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__tmp_ms_x__FBDF78E9F72D8DEF");

                entity.HasIndex(e => e.CurrencyId, "idx_Currency_CurrencyId")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NumericId, "idx_Currency_NumericId")
                    .IsUnique()
                    .HasFilter("([NumericId] IS NOT NULL)")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AcceptedInternalNote).HasMaxLength(200);

                entity.Property(e => e.AcceptedInternalNoteDate).HasColumnType("datetime");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EquityFactor>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__EquityFa__FBDF78E9D9883E07");

                entity.HasIndex(e => e.EquityFactorId, "idx_EquityFactor_Id")
                    .IsUnique()
                    .HasFilter("([Active]=(1))")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.EquityFactorId)
                    .IsRequired()
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<RatingScheme>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__RatingSc__FBDF78E978C13B42");

                entity.HasIndex(e => new { e.Name, e.Version }, "idx_RatingScheme_NameVersion")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountExpirationDate).HasDefaultValueSql("((2))");

                entity.Property(e => e.ChangeDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.CurrencyRecord)
                    .WithMany(p => p.RatingScheme)
                    .HasForeignKey(d => d.CurrencyRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_RatingScheme_Currency");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}